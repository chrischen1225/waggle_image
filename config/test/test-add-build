#!/bin/bash

rm -rf temp
mkdir temp
cp -Rf ../waggle temp
cp ../initialize-configuration-db temp
cp .././add-build temp
cd temp

./initialize-configuration-db > /dev/null

test_count=0
pass_count=0

assert_equals() {
  local -r actual=$1
  local -r expected=$2
  ((test_count++))
  if [ "$actual" == "$expected" ]; then
    ((pass_count++))
    echo "[0;32;1m[PASS][0;30;39m"
  else
    echo "[0;31;1m[FAIL][0;30;39m"
  fi
  echo
}

declare -r date=$(date +%Y-%m-%d)

# test adding a new version with the default deployment (1) [expect success]
echo "[0;33;1m[TEST][0;30;39m new version w/ default deployment" 
./add-build --version=1.2.3 | grep "1.2.3 (0) Public $date"
assert_equals $? 0

# test adding a new revision with the specified deployment [expect success]
echo "[0;33;1m[TEST][0;30;39m new revision w/ specified deployment"
./add-build --version=1.2.3 --deployment=1 | grep "1.2.3 (1) Public $date"
assert_equals $? 0

# test adding an existing deployment [expect failure]
echo "[0;33;1m[TEST][0;30;39m existing deployment (failure test)"
./add-build --version=1.2.3 --revision=0 --deployment=1 | grep "Error: deployment '1' is already in use"
assert_equals $? 0

# test adding a new deployment [expect success]
echo "[0;33;1m[TEST][0;30;39m new deployment"
./add-build --version=1.2.3 --revision=1 --deployment=2 | grep "1.2.3 (1) Collaborator $date"
assert_equals $? 0

# test adding a new version with a non-default deployment [expect success]
echo "[0;33;1m[TEST][0;30;39m new version with non-default deployment"
./add-build --version=1.2.4 --deployment=2 | grep "1.2.4 (0) Collaborator $date"
assert_equals $? 0

# test adding the non-existent default deployment implicitly [expect failure]
echo "[0;33;1m[TEST][0;30;39m implicit new non-existent deployment (failure test)" 
./add-build --version=1.2.4 | grep "Error: version '1.2.4' alread exists"
assert_equals $? 0

# test adding the non-existent default deployment explicitly [expect success]
echo "[0;33;1m[TEST][0;30;39m explicit new non-existent deployment"
./add-build --version=1.2.4 --revision=0 | grep "1.2.4 (0) Public $date"
assert_equals $? 0

# test adding a new version with a specified revision [expect failure]
echo "[0;33;1m[TEST][0;30;39m new version w/ specified revision (failure test)"
./add-build --version=1.2.5 --revision=0 | grep "Error: revision specified for new version"
assert_equals $? 0

# test adding a new version with a specified date [expect success]
echo "[0;33;1m[TEST][0;30;39m new version w/ specified date (success test)"
./add-build --version=1.2.6 --date=1942-12-01  | grep '1.2.6 (0) Public 1942-12-01'
assert_equals $? 0

echo "${pass_count} out of ${test_count} tests passed"

cd ..
rm -rf temp
