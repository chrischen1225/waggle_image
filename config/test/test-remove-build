#!/bin/bash

rm -rf temp
mkdir temp
cp -Rf ../waggle temp
cp ../initialize-configuration-db temp
cp .././add-build temp
cp .././remove-build temp
cp .././get-builds temp
cd temp

./initialize-configuration-db > /dev/null

test_count=0
pass_count=0

assert_equals() {
  local -r actual=$1
  local -r expected=$2
  ((test_count++))
  if [ "$actual" == "$expected" ]; then
    ((pass_count++))
    echo "[0;32;1m[PASS][0;30;39m"
  else
    echo "[0;31;1m[FAIL][0;30;39m"
  fi
  echo
}

declare -r date=$(date +%Y-%m-%d)

# test removing the latest build revision [expect success]
echo "[0;33;1m[TEST][0;30;39m remove latest build revision (success test)"
./add-build --version=1.2.3 --deployment=3 --date=1942-12-01 | grep '1.2.3 (0) Development 1942-12-01'
./add-build --version=1.2.3 --deployment=3 --date=1942-12-01 | grep '1.2.3 (1) Development 1942-12-01'
./add-build --version=1.2.3 --deployment=3 --date=1942-12-01 | grep '1.2.3 (2) Development 1942-12-01'
./add-build --version=1.2.3 --revision=0 --deployment=1 --date=1942-12-01 | grep '1.2.3 (0) Public 1942-12-01'
./remove-build --version=1.2.3 --deployment=3 | grep '1.2.3 (2) Development 1942-12-01'
assert_equals $? 0

declare -r builds=$(./get-builds)

echo "[0;33;1m[TEST][0;30;39m verify build revision 0 deployment 3 (success test)"
echo $builds | grep -o '1.2.3 (0) Development 1942-12-01'
assert_equals $? 0

echo "[0;33;1m[TEST][0;30;39m verify build revision 1 deployment 3 (success test)"
echo $builds | grep -o '1.2.3 (1) Development 1942-12-01'
assert_equals $? 0

echo "[0;33;1m[TEST][0;30;39m verify missing build revision 2 deployment 3 (success test)"
echo $builds | grep -o -v '1.2.3 (2) Development 1942-12-01'
assert_equals $? 0

echo "[0;33;1m[TEST][0;30;39m verify build revision 0 deployment 1 (success test)"
echo $builds | grep -o '1.2.3 (0) Public 1942-12-01'
assert_equals $? 0

echo "${pass_count} out of ${test_count} tests passed"

cd ..
rm -rf temp
