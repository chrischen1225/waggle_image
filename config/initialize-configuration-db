#!/usr/bin/python3

import os
import os.path
import tinydb
import uuid

import waggle.build as build

def add_dependencies(build_config, dep_type_name, dep_names):
  if build_config.get_dependency_type(dep_type_name) == None:
    build_config.add_dependency_type(dep_type_name)

  dep_type = build_config.get_dependency_type(dep_type_name).eid

  for dep_name in dep_names:
    if build_config.get_dependency(dep_name, dep_type) == None:
      build_config.add_dependency(dep_name, dep_type)

def print_entries(entries):
  for entry in entries:
    name = entry['name']
    print('{} {}'.format(entry.eid, name))


def main():
  script_dir = os.path.dirname(os.path.abspath(__file__))

  build_config = build.Configuration()

  # add APT dependency type and dependencies
  dep_type_name = 'apt'
  apt_common_deps = ["htop", "iotop", "iftop", "bwm-ng", "screen", "git", "python-dev", "python-pip",
               "python3-dev", "python3-pip", "dosfstools", "parted", "bash-completion", "v4l-utils",
               "network-manager", "usbutils", "nano", "stress-ng", "rabbitmq-server", "python-psutil",
               "python3-psutil"]
  apt_nc_deps = ["wvdial", "autossh", "bossa-cli", "curl", "python3-zmq"]
  apt_ep_deps = ["fswebcam", "alsa-utils", "portaudio19-dev", "libavcodec-ffmpeg56",
               "libavformat-ffmpeg56", "libavutil-ffmpeg54", "libc6", "libcairo2", "libgdk-pixbuf2.0-0",
               "libglib2.0-0", "libgtk-3-0", "libpng12-0", "libstdc++6", "libswscale-ffmpeg3", "zlib1g"]
  dep_names = apt_common_deps + apt_nc_deps + apt_ep_deps
  add_dependencies(build_config, dep_type_name, dep_names)

  # add python 2 dependency type and dependencies
  dep_type_name = 'python2'
  python2_common_deps = ["tabulate", "pika"]
  python2_nc_deps = ["crcmod", "pyserial"]
  python2_ep_deps = ["numpy"]
  dep_names = python2_common_deps + python2_nc_deps + python2_ep_deps
  add_dependencies(build_config, dep_type_name, dep_names)

  # add python 3 dependency type and dependencies
  dep_type_name = 'python3'
  python3_common_deps = ["tabulate", "pika"]
  python3_nc_deps = ["crcmod", "pyserial", "netifaces" "pyzmq", "pyinotify", "pynmea2"]
  python3_ep_deps = ["pyaudio", "numpy"]
  dep_names = python3_common_deps + python3_nc_deps + python3_ep_deps
  add_dependencies(build_config, dep_type_name, dep_names)

  # add standalone deb package dependency type and dependencies
  dep_type_name = 'deb'
  deb_common_deps = []
  deb_nc_deps = []
  deb_ep_deps = ["OpenCV-unknown-armv7l-dev", "OpenCV-unknown-armv7l-libs",\
               "OpenCV-unknown-armv7l-main", "OpenCV-unknown-armv7l-python",\
               "OpenCV-unknown-armv7l-samples"]
  dep_names = deb_common_deps + deb_nc_deps + deb_ep_deps
  add_dependencies(build_config, dep_type_name, dep_names)

  # add node elements
  node_element_names = ["Node Controller", "Edge Processor"]
  for name in node_element_names:
    build_config.add_node_element(name)

  # add CPU architectures
  cpu_architecture_names = ["armv7l", "x86_64"]
  for name in cpu_architecture_names:
    build_config.add_cpu_architecture(name)

  # add base versions
  arch_id = build_config.get_cpu_architecture('armv7l').eid
  element = build_config.get_node_element('Node Controller').eid
  # nc_uuid = uuid.uuid4()
  nc_uuid = 'f6d47837-28dc-4958-877b-34123ce7a533'
  date = '20170307'
  dependencies = build_config.get_dependencies()
  apt_type_id = build_config.get_dependency_type('apt').eid
  python2_type_id = build_config.get_dependency_type('python2').eid
  python3_type_id = build_config.get_dependency_type('python3').eid
  deb_type_id = build_config.get_dependency_type('deb').eid
  dependency_ids = [build_config.get_dependency(name, apt_type_id).eid for name in apt_nc_deps]\
                 + [build_config.get_dependency(name, python2_type_id).eid for name in python2_nc_deps]\
                 + [build_config.get_dependency(name, python3_type_id).eid for name in python3_nc_deps]\
                 + [build_config.get_dependency(name, deb_type_id).eid for name in deb_nc_deps]
  element_id = build_config.get_node_element('Node Controller').eid
  architecture_id = build_config.get_cpu_architecture('armv7l').eid
  build_config.add_base(str(nc_uuid), date, dependency_ids, element_id, architecture_id)

  ep_uuid = '1f93c407-6a17-47b6-ad35-3d3291861cc8'
  date = '20170307'
  dependencies = build_config.get_dependencies()
  apt_type_id = build_config.get_dependency_type('apt').eid
  python2_type_id = build_config.get_dependency_type('python2').eid
  python3_type_id = build_config.get_dependency_type('python3').eid
  deb_type_id = build_config.get_dependency_type('deb').eid
  dependency_ids = [build_config.get_dependency(name, apt_type_id).eid for name in apt_ep_deps]\
                 + [build_config.get_dependency(name, python2_type_id).eid for name in python2_ep_deps]\
                 + [build_config.get_dependency(name, python3_type_id).eid for name in python3_ep_deps]\
                 + [build_config.get_dependency(name, deb_type_id).eid for name in deb_ep_deps]
  element_id = build_config.get_node_element('Edge Processor').eid
  architecture_id = build_config.get_cpu_architecture('armv7l').eid
  build_config.add_base(str(ep_uuid), date, dependency_ids, element_id, architecture_id)

  # add shadows
  shadow_entry_names = ["Default", "AoT"]
  shadow_entry_files = ['waggle_shadow', 'root_shadow']
  shadow_entry_ids = []
  for name, file in zip(shadow_entry_names, shadow_entry_files):
    shadow_entry_ids.append(build_config.add_shadow_entry(name, file))

  # add wireless configs
  wireless_config_names = ["Default", "AoT"]
  wireless_config_repos = ['nodecontroller', 'private_config']
  wireless_config_ids = []
  for name, repo in zip(wireless_config_names, wireless_config_repos):
    wireless_config_ids.append(build_config.add_wireless_config(name, repo))

  # add registration keys
  reg_key_names = ["None", "Development", "AoT"]
  reg_key_files = ['', 'id_rsa_waggle_dev_registration', 'id_rsa_waggle_aot_registration']
  reg_key_ids = []
  for name, file in zip(reg_key_names, reg_key_files):
    reg_key_ids.append(build_config.add_registration_key(name, file))

  # add beehive hosts
  beehive_host_names = ["Default", "Development", "AoT"]
  beehive_host_fqdns = ['localhost', 'beehive-dev', 'beehive1.mcs.anl.gov']
  beehive_host_addresses = ['127.0.0.1', '10.10.10.5', '']
  beehive_host_ids = []
  for name, fqdn, address in zip(beehive_host_names, beehive_host_fqdns, beehive_host_addresses):
    beehive_host_ids.append(build_config.add_beehive_host(name, fqdn, address))

  # add deployments (name, root shadow, sudo, wvdial config, reg. key, beehive host)
  build_config.add_deployment('Public', shadow_entry_ids[0], True, wireless_config_ids[0],
                               reg_key_ids[0], beehive_host_ids[0])
  build_config.add_deployment('Collaborator', shadow_entry_ids[1], True, wireless_config_ids[0],
                               reg_key_ids[2], beehive_host_ids[2])
  build_config.add_deployment('Development', shadow_entry_ids[1], True, wireless_config_ids[1],
                               reg_key_ids[2], beehive_host_ids[1])
  build_config.add_deployment('AoT', shadow_entry_ids[1], True, wireless_config_ids[1],
                               reg_key_ids[2], beehive_host_ids[2])

  # add build


  print_entries(build_config.get_dependency_types())

  # print out the dependencies
  deps = build_config.get_dependencies()
  for dep in deps:
    name = dep['name']
    type_id = dep['type']
    dep_type = build_config.get_dependency_type(eid=type_id)['name']
    print('{} {} {}'.format(dep.eid, name, dep_type))

  print_entries(build_config.get_node_elements())

  print_entries(build_config.get_cpu_architectures())

  for entry in build_config.get_bases():
    base_uuid = entry['uuid']
    print('{} {}'.format(entry.eid, base_uuid))

  print_entries(build_config.get_shadow_entries())

  print_entries(build_config.get_registration_keys())

  print_entries(build_config.get_wireless_configs())

  print_entries(build_config.get_beehive_hosts())

  print_entries(build_config.get_deployments())

if __name__ == '__main__':
  main()
