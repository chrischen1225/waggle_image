#!/usr/bin/python3

import os
import os.path
import tinydb

import waggle.build as build

def add_dependencies(build_config, dep_type_name, dep_names):
  if build_config.get_dependency_type_id(dep_type_name) == None:
    build_config.add_dependency_type(dep_type_name)

  dep_type = build_config.get_dependency_type_id(dep_type_name)

  for dep_name in dep_names:
    if build_config.get_dependency_id(dep_name, dep_type) == None:
      build_config.add_dependency(dep_name, dep_type)


def main():
  script_dir = os.path.dirname(os.path.abspath(__file__))

  build_config = build.Configuration()

  # add APT dependency type and dependencies
  dep_type_name = 'apt'
  dep_names = ["htop", "iotop", "iftop", "bwm-ng", "screen", "git", "python-dev", "python-pip",
               "python3-dev", "python3-pip", "dosfstools", "parted", "bash-completion", "v4l-utils",
               "network-manager", "usbutils", "nano", "stress-ng", "rabbitmq-server", "python-psutil",
               "python3-psutil", "wvdial", "autossh", "bossa-cli", "curl", "python3-zmq",
               "fswebcam", "alsa-utils", "portaudio19-dev", "libavcodec-ffmpeg56",
               "libavformat-ffmpeg56", "libavutil-ffmpeg54", "libc6", "libcairo2", "libgdk-pixbuf2.0-0",
               "libglib2.0-0", "libgtk-3-0", "libpng12-0", "libstdc++6", "libswscale-ffmpeg3", "zlib1g"]
  add_dependencies(build_config, dep_type_name, dep_names)

  # add python 2 dependency type and dependencies
  dep_type_name = 'python2'
  dep_names = ["tabulate", "pika", "crcmod", "pyserial", "numpy"]
  add_dependencies(build_config, dep_type_name, dep_names)

  # add python 3 dependency type and dependencies
  dep_type_name = 'python3'
  dep_names = ["tabulate", "pika", "crcmod", "netifaces" "pyzmq", "pyinotify", "pynmea2", "pyserial",\
               "pyaudio", "numpy"]
  add_dependencies(build_config, dep_type_name, dep_names)

  # add standalone deb package dependency type and dependencies
  dep_type_name = 'deb'
  dep_names = ["OpenCV-unknown-armv7l-dev", "OpenCV-unknown-armv7l-libs",\
               "OpenCV-unknown-armv7l-main", "OpenCV-unknown-armv7l-python",\
               "OpenCV-unknown-armv7l-samples"]
  add_dependencies(build_config, dep_type_name, dep_names)

  # add base versions
  node_element_names = ["Node Controller", "Edge Processor"]
  for name in node_element_names:
    build_config.add_node_element(name)

  # add CPU architectures
  cpu_architecture_names = ["armv7l", "x86_64"]
  for name in cpu_architecture_names:
    build_config.add_cpu_architecture(name)

  # print out the dependency types
  dep_types = build_config.get_dependency_types()
  for dep_type in dep_types:
    name = dep_type['name']
    print('{} {}'.format(build_config.get_dependency_type_id(name), name))

  # print out the dependencies
  deps = build_config.get_dependencies()
  for dep in deps:
    name = dep['name']
    type_id = dep['type']
    dep_type = build_config.get_dependency_type(type_id)['name']
    print('{} {} {}'.format(build_config.get_dependency_id(name, type_id), name, dep_type))

  node_elements = build_config.get_node_elements()
  for node_element in node_elements:
    name = node_element['name']
    print('{} {}'.format(build_config.get_node_element_id(name), name))

  cpu_architectures = build_config.get_cpu_architectures()
  for cpu_architecture in cpu_architectures:
    name = cpu_architecture['name']
    print('{} {}'.format(build_config.get_cpu_architecture_id(name), name))

if __name__ == '__main__':
  main()
