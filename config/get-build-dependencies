#!/usr/bin/env python3

import copy
import getopt
import os
import os.path
import re
import subprocess
import sys
import time

import waggle.build as build

def main(argv):
  usage_message = ''.join(("Usage: setup-build [OPTIONS]\n", \
                          "OPTIONS\n", \
                          "  --help                          ", \
                          "print help screen\n", \
                          "  -n |--node-controller | --nc    ", \
                          "return Node Controller dependencies\n", \
                          "  -e |--edge-processor | --ep    ", \
                          "return Edge Processor dependencies\n", \
                          "  -v |--version=<version>         ", \
                          "set the build version to <version>\n", \
                          "  -r |--revision=<revision>       ", \
                          "set the build revision to <revision>\n", \
                          "  -d |--deployment=<deployment_name>   ", \
                          "set the build deployment to <deployment>\n", \
                          "  -a |--architecture=<architecture>   "))
  try:
    opts, args = getopt.getopt(
      argv, "nev:r:d:a:",
      ["help", "node-controller", "nc", "edge-processor", "ep",
       "version=", "revision=", "deployment=", "architecture="])
  except getopt.GetoptError as ge:
    print("\nError:", str(ge))
    print(usage_message + "\n")
    sys.exit(1)

  node_controller = False
  edge_processor = False
  version = None
  revision = None
  deployment_name = None
  architecture_name = None
  for opt, arg in opts:
    if opt == '--help':
      print("\n" + usage_message + "\n")
      sys.exit(0)
    elif opt in ('-n', '--node-controller', '--nc'):
      node_controller = True
    elif opt in ('-e', '--edge-processor', '--ep'):
      edge_processor = True
    elif opt in ('-v', '--version'):
      version = arg
    elif opt in ('-r', '--revision'):
      revision = int(arg)
    elif opt in ('-d', '--deployment'):
      deployment_name = arg
    elif opt in ('-a', '--architecture'):
      architecture_name = arg
    else:
      print("\n" + usage_message + "\n")
      sys.exit(2)

  script_dir = os.path.dirname(os.path.abspath(__file__))

  build_config = build.Configuration()

  dependencies = build_config.get_build_dependencies(version, revision, deployment_name, architecture_name)

  if node_controller:
    print(dependencies[0])
  if edge_processor:
    print(dependencies[1])

if __name__ == '__main__':
  main(sys.argv[1:])
