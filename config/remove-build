#!/usr/bin/env python3

import copy
import getopt
import os
import os.path
import subprocess
import sys
import time
import tinydb

import waggle.build as build

def main(argv):
  usage_message = ''.join(("Usage: add-build [OPTIONS]\n", \
                          "OPTIONS\n", \
                          "  --help                          ", \
                          "print help screen\n", \
                          "  -v |--version=<version>         ", \
                          "set the build version to <version>\n", \
                          "  -d |--deployment=<deployment>   ", \
                          "set the build deployment to <deployment> (default 1)\n"))
  try:
    opts, args = getopt.getopt(
      argv, "v:r:d:",
      ["help", "version=", "revision=", "deployment="])
  except getopt.GetoptError as ge:
    print("\nError:", str(ge))
    print(usage_message + "\n")
    sys.exit(1)

  version = None
  deployment = None
  for opt, arg in opts:
    if opt == '--help':
      print("\n" + usage_message + "\n")
      sys.exit(0)
    elif opt in ('-v', '--version'):
      version = arg
    elif opt in ('-v', '--deployment'):
      deployment = int(arg)
    else:
      print("\n" + usage_message + "\n")
      sys.exit(2)

  if version == None:
    print("Error: version not specified")

  if deployment == None:
    deployment = 1

  script_dir = os.path.dirname(os.path.abspath(__file__))

  build_config = build.Configuration()

  builds = build_config.get_builds()
  available_revisions \
    = [bld for bld in builds if bld['published_version'] == version and bld['deployment'] == deployment]
  if len(available_revisions) == 0:
    print("Error: build not found with version '{}' and deployment '{}'".format(version, deployment))
    sys.exit(3)
  sorted_revisions = sorted(available_revisions,
    key=lambda bld: ''.join((bld['published_version'], str(bld['revision']))))
  entry = sorted_revisions[-1]

  deployment = build_config.get_deployment(eid=entry['deployment'])
  if deployment == None:
    print("Error: deployment '{}' does not exist".format(entry['deployment']))
    sys.exit(6)
  print('{} {} ({}) {} {}:'.format(
    entry.eid, entry['published_version'], entry['revision'],
    deployment['name'], entry['date']))
  print('  Bases:')
  base_ids = [entry['nc_base'], entry['ep_base']]
  for base_id in base_ids:
    base = build_config.get_base(eid=base_id)
    print('    {} {} ({}) {} - {}:'.format(
      base.eid, build_config.get_node_element(eid=base['node_element'])['name'],
      build_config.get_cpu_architecture(eid=base['cpu_architecture'])['name'], base['date'],
      base['uuid']))
  print('  Commit IDs:')
  repos = ['waggle_image  ', 'core          ', 'nodecontroller', 'edge_processor', 'plugin_manager']
  keys = ['waggle_image_commit', 'core_commit', 'nc_commit', 'ep_commit', 'pm_commit']
  for repo,key in zip(repos, keys):
    print('    {} {}'.format(repo, entry[key]))

  build_config.remove_build(entry.eid)


if __name__ == '__main__':
  main(sys.argv[1:])
